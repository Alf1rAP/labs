
lab 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b8  080003b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003c0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001346  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000490  00000000  00000000  0002137a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c0  00000000  00000000  00021810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000178  00000000  00000000  000219d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e63c  00000000  00000000  00021b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f1f  00000000  00000000  00040184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb4d1  00000000  00000000  000420a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fd574  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000528  00000000  00000000  000fd5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003a0 	.word	0x080003a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080003a0 	.word	0x080003a0

080001c8 <main>:
#include "stm32f4xx.h"

int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
    uint32_t i;

    // Включаем тактирование порта GPIOD для светодиодов
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80001ce:	4b22      	ldr	r3, [pc, #136]	; (8000258 <main+0x90>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d2:	4a21      	ldr	r2, [pc, #132]	; (8000258 <main+0x90>)
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	6313      	str	r3, [r2, #48]	; 0x30

    // Настроим пины GPIOD на выход (для светодиодов)
    GPIOD->MODER |= 0x55000000;   // Пины 12-15 на выход
 80001da:	4b20      	ldr	r3, [pc, #128]	; (800025c <main+0x94>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a1f      	ldr	r2, [pc, #124]	; (800025c <main+0x94>)
 80001e0:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80001e4:	6013      	str	r3, [r2, #0]
    GPIOD->OTYPER &= ~0x0000;     // Выходы с подтягивающими резисторами
 80001e6:	4b1d      	ldr	r3, [pc, #116]	; (800025c <main+0x94>)
 80001e8:	4a1c      	ldr	r2, [pc, #112]	; (800025c <main+0x94>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	6053      	str	r3, [r2, #4]
    GPIOD->OSPEEDR &= ~0x00000000; // Нормальная скорость
 80001ee:	4b1b      	ldr	r3, [pc, #108]	; (800025c <main+0x94>)
 80001f0:	4a1a      	ldr	r2, [pc, #104]	; (800025c <main+0x94>)
 80001f2:	689b      	ldr	r3, [r3, #8]
 80001f4:	6093      	str	r3, [r2, #8]

    while (1)
    {
        // Включаем светодиод по очереди
        for (i = 0; i < 4; i++) {
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
 80001fa:	e028      	b.n	800024e <main+0x86>
            GPIOD->ODR = (1 << (12 + i));  // Включаем светодиод
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	330c      	adds	r3, #12
 8000200:	2201      	movs	r2, #1
 8000202:	409a      	lsls	r2, r3
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <main+0x94>)
 8000206:	615a      	str	r2, [r3, #20]
            for (volatile uint32_t delay = 0; delay < 500000; delay++) {}  // Задержка
 8000208:	2300      	movs	r3, #0
 800020a:	60bb      	str	r3, [r7, #8]
 800020c:	e002      	b.n	8000214 <main+0x4c>
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	3301      	adds	r3, #1
 8000212:	60bb      	str	r3, [r7, #8]
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	4a12      	ldr	r2, [pc, #72]	; (8000260 <main+0x98>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d9f8      	bls.n	800020e <main+0x46>
            GPIOD->ODR &= ~(1 << (12 + i)); // Выключаем светодиод
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <main+0x94>)
 800021e:	695b      	ldr	r3, [r3, #20]
 8000220:	68fa      	ldr	r2, [r7, #12]
 8000222:	320c      	adds	r2, #12
 8000224:	2101      	movs	r1, #1
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	43d2      	mvns	r2, r2
 800022c:	4611      	mov	r1, r2
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <main+0x94>)
 8000230:	400b      	ands	r3, r1
 8000232:	6153      	str	r3, [r2, #20]
            for (volatile uint32_t delay = 0; delay < 500000; delay++) {}  // Задержка
 8000234:	2300      	movs	r3, #0
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	e002      	b.n	8000240 <main+0x78>
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3301      	adds	r3, #1
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a07      	ldr	r2, [pc, #28]	; (8000260 <main+0x98>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d9f8      	bls.n	800023a <main+0x72>
        for (i = 0; i < 4; i++) {
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	3301      	adds	r3, #1
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	2b03      	cmp	r3, #3
 8000252:	d9d3      	bls.n	80001fc <main+0x34>
 8000254:	e7cf      	b.n	80001f6 <main+0x2e>
 8000256:	bf00      	nop
 8000258:	40023800 	.word	0x40023800
 800025c:	40020c00 	.word	0x40020c00
 8000260:	0007a11f 	.word	0x0007a11f

08000264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000268:	e7fe      	b.n	8000268 <NMI_Handler+0x4>

0800026a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800026e:	e7fe      	b.n	800026e <HardFault_Handler+0x4>

08000270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000274:	e7fe      	b.n	8000274 <MemManage_Handler+0x4>

08000276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800027a:	e7fe      	b.n	800027a <BusFault_Handler+0x4>

0800027c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000280:	e7fe      	b.n	8000280 <UsageFault_Handler+0x4>

08000282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000286:	bf00      	nop
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr

08000290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002b0:	f000 f83e 	bl	8000330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <SystemInit+0x20>)
 80002be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002c2:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <SystemInit+0x20>)
 80002c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80002dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002e2:	490e      	ldr	r1, [pc, #56]	; (800031c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002f8:	4c0b      	ldr	r4, [pc, #44]	; (8000328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000306:	f7ff ffd7 	bl	80002b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800030a:	f000 f825 	bl	8000358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030e:	f7ff ff5b 	bl	80001c8 <main>
  bx  lr    
 8000312:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000320:	080003c0 	.word	0x080003c0
  ldr r2, =_sbss
 8000324:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000328:	20000024 	.word	0x20000024

0800032c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>
	...

08000330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <HAL_IncTick+0x20>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	461a      	mov	r2, r3
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <HAL_IncTick+0x24>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4413      	add	r3, r2
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <HAL_IncTick+0x24>)
 8000342:	6013      	str	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000
 8000354:	20000020 	.word	0x20000020

08000358 <__libc_init_array>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	4d0d      	ldr	r5, [pc, #52]	; (8000390 <__libc_init_array+0x38>)
 800035c:	4c0d      	ldr	r4, [pc, #52]	; (8000394 <__libc_init_array+0x3c>)
 800035e:	1b64      	subs	r4, r4, r5
 8000360:	10a4      	asrs	r4, r4, #2
 8000362:	2600      	movs	r6, #0
 8000364:	42a6      	cmp	r6, r4
 8000366:	d109      	bne.n	800037c <__libc_init_array+0x24>
 8000368:	4d0b      	ldr	r5, [pc, #44]	; (8000398 <__libc_init_array+0x40>)
 800036a:	4c0c      	ldr	r4, [pc, #48]	; (800039c <__libc_init_array+0x44>)
 800036c:	f000 f818 	bl	80003a0 <_init>
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	10a4      	asrs	r4, r4, #2
 8000374:	2600      	movs	r6, #0
 8000376:	42a6      	cmp	r6, r4
 8000378:	d105      	bne.n	8000386 <__libc_init_array+0x2e>
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000380:	4798      	blx	r3
 8000382:	3601      	adds	r6, #1
 8000384:	e7ee      	b.n	8000364 <__libc_init_array+0xc>
 8000386:	f855 3b04 	ldr.w	r3, [r5], #4
 800038a:	4798      	blx	r3
 800038c:	3601      	adds	r6, #1
 800038e:	e7f2      	b.n	8000376 <__libc_init_array+0x1e>
 8000390:	080003b8 	.word	0x080003b8
 8000394:	080003b8 	.word	0x080003b8
 8000398:	080003b8 	.word	0x080003b8
 800039c:	080003bc 	.word	0x080003bc

080003a0 <_init>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

080003ac <_fini>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr
