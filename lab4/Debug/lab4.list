
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001460  08001460  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001460  08001460  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08001460  08001460  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001460  08001460  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001460  08001460  00011460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001464  08001464  00011464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08001468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000144  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085e3  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001238  00000000  00000000  0002862f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  00029868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000850  00000000  00000000  0002a150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8ae  00000000  00000000  0002a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009057  00000000  00000000  0004a24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4355  00000000  00000000  000532a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001175fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024b0  00000000  00000000  0011764c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001448 	.word	0x08001448

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08001448 	.word	0x08001448

080001c8 <main>:
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
    HAL_Init();
 80001ce:	f000 fac3 	bl	8000758 <HAL_Init>
    SystemClock_Config();
 80001d2:	f000 f899 	bl	8000308 <SystemClock_Config>
    MX_GPIO_Init();
 80001d6:	f000 f89f 	bl	8000318 <MX_GPIO_Init>
    MX_TIM2_Init();
 80001da:	f000 f8e9 	bl	80003b0 <MX_TIM2_Init>
    MX_TIM3_Init();
 80001de:	f000 f907 	bl	80003f0 <MX_TIM3_Init>
    MX_TIM4_Init();
 80001e2:	f000 f927 	bl	8000434 <MX_TIM4_Init>
    MX_TIM5_Init();
 80001e6:	f000 f947 	bl	8000478 <MX_TIM5_Init>

    // Запуск таймеров с прерываниями
    HAL_TIM_Base_Start_IT(&htim2);  // Таймер для светодиода 1
 80001ea:	483e      	ldr	r0, [pc, #248]	; (80002e4 <main+0x11c>)
 80001ec:	f000 fe7a 	bl	8000ee4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);  // Таймер для светодиода 2
 80001f0:	483d      	ldr	r0, [pc, #244]	; (80002e8 <main+0x120>)
 80001f2:	f000 fe77 	bl	8000ee4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);  // Таймер для светодиода 3
 80001f6:	483d      	ldr	r0, [pc, #244]	; (80002ec <main+0x124>)
 80001f8:	f000 fe74 	bl	8000ee4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim5);  // Таймер для светодиода 4
 80001fc:	483c      	ldr	r0, [pc, #240]	; (80002f0 <main+0x128>)
 80001fe:	f000 fe71 	bl	8000ee4 <HAL_TIM_Base_Start_IT>

    while (1)
    {
        // Чтение состояния кнопки (внешний пин PA0)
        button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000202:	2101      	movs	r1, #1
 8000204:	483b      	ldr	r0, [pc, #236]	; (80002f4 <main+0x12c>)
 8000206:	f000 fdeb 	bl	8000de0 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	461a      	mov	r2, r3
 800020e:	4b3a      	ldr	r3, [pc, #232]	; (80002f8 <main+0x130>)
 8000210:	701a      	strb	r2, [r3, #0]

        // Проверяем, было ли нажатие кнопки (по спадающему фронту)
        if (button_state == GPIO_PIN_RESET && button_pressed == 0) {
 8000212:	4b39      	ldr	r3, [pc, #228]	; (80002f8 <main+0x130>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d158      	bne.n	80002cc <main+0x104>
 800021a:	4b38      	ldr	r3, [pc, #224]	; (80002fc <main+0x134>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d154      	bne.n	80002cc <main+0x104>
            button_pressed = 1;  // Устанавливаем флаг, чтобы избежать повторных срабатываний
 8000222:	4b36      	ldr	r3, [pc, #216]	; (80002fc <main+0x134>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]

            // Увеличиваем счетчик нажатий кнопки
            button_press_count++;
 8000228:	4b35      	ldr	r3, [pc, #212]	; (8000300 <main+0x138>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b33      	ldr	r3, [pc, #204]	; (8000300 <main+0x138>)
 8000232:	701a      	strb	r2, [r3, #0]

            // Циклично сдвигаем значения периодов для всех светодиодов по часовой стрелке
            uint32_t temp = led_periods[3];  // Сохраняем последнее значение
 8000234:	4b33      	ldr	r3, [pc, #204]	; (8000304 <main+0x13c>)
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	603b      	str	r3, [r7, #0]
            for (int i = 3; i > 0; i--) {
 800023a:	2303      	movs	r3, #3
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	e00b      	b.n	8000258 <main+0x90>
                led_periods[i] = led_periods[i - 1];  // Сдвигаем все значения на 1 вправо
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3b01      	subs	r3, #1
 8000244:	4a2f      	ldr	r2, [pc, #188]	; (8000304 <main+0x13c>)
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	492e      	ldr	r1, [pc, #184]	; (8000304 <main+0x13c>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int i = 3; i > 0; i--) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	3b01      	subs	r3, #1
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b00      	cmp	r3, #0
 800025c:	dcf0      	bgt.n	8000240 <main+0x78>
            }
            led_periods[0] = temp;  // Переносим последнее значение в начало
 800025e:	4a29      	ldr	r2, [pc, #164]	; (8000304 <main+0x13c>)
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	6013      	str	r3, [r2, #0]

            // Перезагружаем таймеры с новыми периодами
            htim2.Init.Period = led_periods[0];
 8000264:	4b27      	ldr	r3, [pc, #156]	; (8000304 <main+0x13c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a1e      	ldr	r2, [pc, #120]	; (80002e4 <main+0x11c>)
 800026a:	60d3      	str	r3, [r2, #12]
            htim3.Init.Period = led_periods[1];
 800026c:	4b25      	ldr	r3, [pc, #148]	; (8000304 <main+0x13c>)
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <main+0x120>)
 8000272:	60d3      	str	r3, [r2, #12]
            htim4.Init.Period = led_periods[2];
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <main+0x13c>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <main+0x124>)
 800027a:	60d3      	str	r3, [r2, #12]
            htim5.Init.Period = led_periods[3];
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <main+0x13c>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a1b      	ldr	r2, [pc, #108]	; (80002f0 <main+0x128>)
 8000282:	60d3      	str	r3, [r2, #12]

            HAL_TIM_Base_Stop_IT(&htim2);
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <main+0x11c>)
 8000286:	f000 fe9d 	bl	8000fc4 <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim3);
 800028a:	4817      	ldr	r0, [pc, #92]	; (80002e8 <main+0x120>)
 800028c:	f000 fe9a 	bl	8000fc4 <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim4);
 8000290:	4816      	ldr	r0, [pc, #88]	; (80002ec <main+0x124>)
 8000292:	f000 fe97 	bl	8000fc4 <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim5);
 8000296:	4816      	ldr	r0, [pc, #88]	; (80002f0 <main+0x128>)
 8000298:	f000 fe94 	bl	8000fc4 <HAL_TIM_Base_Stop_IT>

            HAL_TIM_Base_Init(&htim2);
 800029c:	4811      	ldr	r0, [pc, #68]	; (80002e4 <main+0x11c>)
 800029e:	f000 fdd1 	bl	8000e44 <HAL_TIM_Base_Init>
            HAL_TIM_Base_Init(&htim3);
 80002a2:	4811      	ldr	r0, [pc, #68]	; (80002e8 <main+0x120>)
 80002a4:	f000 fdce 	bl	8000e44 <HAL_TIM_Base_Init>
            HAL_TIM_Base_Init(&htim4);
 80002a8:	4810      	ldr	r0, [pc, #64]	; (80002ec <main+0x124>)
 80002aa:	f000 fdcb 	bl	8000e44 <HAL_TIM_Base_Init>
            HAL_TIM_Base_Init(&htim5);
 80002ae:	4810      	ldr	r0, [pc, #64]	; (80002f0 <main+0x128>)
 80002b0:	f000 fdc8 	bl	8000e44 <HAL_TIM_Base_Init>

            HAL_TIM_Base_Start_IT(&htim2);
 80002b4:	480b      	ldr	r0, [pc, #44]	; (80002e4 <main+0x11c>)
 80002b6:	f000 fe15 	bl	8000ee4 <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim3);
 80002ba:	480b      	ldr	r0, [pc, #44]	; (80002e8 <main+0x120>)
 80002bc:	f000 fe12 	bl	8000ee4 <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim4);
 80002c0:	480a      	ldr	r0, [pc, #40]	; (80002ec <main+0x124>)
 80002c2:	f000 fe0f 	bl	8000ee4 <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim5);
 80002c6:	480a      	ldr	r0, [pc, #40]	; (80002f0 <main+0x128>)
 80002c8:	f000 fe0c 	bl	8000ee4 <HAL_TIM_Base_Start_IT>
        }

        // Если кнопка отпущена, сбрасываем флаг
        if (button_state == GPIO_PIN_SET) {
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <main+0x130>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d102      	bne.n	80002da <main+0x112>
            button_pressed = 0;
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <main+0x134>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
        }

        // Пауза, чтобы избежать перегрузки процессора
        HAL_Delay(10);  // Можно уменьшить значение, если система стабильна
 80002da:	200a      	movs	r0, #10
 80002dc:	f000 faae 	bl	800083c <HAL_Delay>
        button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80002e0:	e78f      	b.n	8000202 <main+0x3a>
 80002e2:	bf00      	nop
 80002e4:	20000038 	.word	0x20000038
 80002e8:	20000080 	.word	0x20000080
 80002ec:	200000c8 	.word	0x200000c8
 80002f0:	20000110 	.word	0x20000110
 80002f4:	40020000 	.word	0x40020000
 80002f8:	2000015a 	.word	0x2000015a
 80002fc:	20000159 	.word	0x20000159
 8000300:	20000158 	.word	0x20000158
 8000304:	20000000 	.word	0x20000000

08000308 <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
    // Настройка системного тактирования
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
	...

08000318 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 030c 	add.w	r3, r7, #12
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]

    // Включаем тактирование порта D для светодиодов
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800032e:	2300      	movs	r3, #0
 8000330:	60bb      	str	r3, [r7, #8]
 8000332:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <MX_GPIO_Init+0x8c>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <MX_GPIO_Init+0x8c>)
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
 800033e:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <MX_GPIO_Init+0x8c>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	f003 0308 	and.w	r3, r3, #8
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]

    // Включаем тактирование порта A для кнопки
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_GPIO_Init+0x8c>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <MX_GPIO_Init+0x8c>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_GPIO_Init+0x8c>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

    // Настройка светодиодов (PD12, PD13, PD14, PD15)
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000366:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800036a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036c:	2301      	movs	r3, #1
 800036e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000378:	f107 030c 	add.w	r3, r7, #12
 800037c:	4619      	mov	r1, r3
 800037e:	480a      	ldr	r0, [pc, #40]	; (80003a8 <MX_GPIO_Init+0x90>)
 8000380:	f000 fb92 	bl	8000aa8 <HAL_GPIO_Init>

    // Настройка кнопки (PA0)
    GPIO_InitStruct.Pin = GPIO_PIN_0;  // Кнопка на PA0
 8000384:	2301      	movs	r3, #1
 8000386:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;  // Вход с кнопки
 8000388:	2300      	movs	r3, #0
 800038a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	4619      	mov	r1, r3
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_GPIO_Init+0x94>)
 8000398:	f000 fb86 	bl	8000aa8 <HAL_GPIO_Init>
}
 800039c:	bf00      	nop
 800039e:	3720      	adds	r7, #32
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020c00 	.word	0x40020c00
 80003ac:	40020000 	.word	0x40020000

080003b0 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
    htim2.Instance = TIM2;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_TIM2_Init+0x38>)
 80003b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ba:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 15999; // Для 1 кГц частоты
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <MX_TIM2_Init+0x38>)
 80003be:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80003c2:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_TIM2_Init+0x38>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = led_periods[0]; // Начальная задержка 100 ms
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_TIM2_Init+0x3c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a06      	ldr	r2, [pc, #24]	; (80003e8 <MX_TIM2_Init+0x38>)
 80003d0:	60d3      	str	r3, [r2, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <MX_TIM2_Init+0x38>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <MX_TIM2_Init+0x38>)
 80003da:	2200      	movs	r2, #0
 80003dc:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim2);
 80003de:	4802      	ldr	r0, [pc, #8]	; (80003e8 <MX_TIM2_Init+0x38>)
 80003e0:	f000 fd30 	bl	8000e44 <HAL_TIM_Base_Init>
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000038 	.word	0x20000038
 80003ec:	20000000 	.word	0x20000000

080003f0 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
    htim3.Instance = TIM3;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_TIM3_Init+0x38>)
 80003f6:	4a0d      	ldr	r2, [pc, #52]	; (800042c <MX_TIM3_Init+0x3c>)
 80003f8:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 15999; // Для 1 кГц частоты
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_TIM3_Init+0x38>)
 80003fc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000400:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_TIM3_Init+0x38>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = led_periods[1]; // Начальная задержка 200 ms
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_TIM3_Init+0x40>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	4a06      	ldr	r2, [pc, #24]	; (8000428 <MX_TIM3_Init+0x38>)
 800040e:	60d3      	str	r3, [r2, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <MX_TIM3_Init+0x38>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000416:	4b04      	ldr	r3, [pc, #16]	; (8000428 <MX_TIM3_Init+0x38>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim3);
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <MX_TIM3_Init+0x38>)
 800041e:	f000 fd11 	bl	8000e44 <HAL_TIM_Base_Init>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000080 	.word	0x20000080
 800042c:	40000400 	.word	0x40000400
 8000430:	20000000 	.word	0x20000000

08000434 <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
    htim4.Instance = TIM4;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_TIM4_Init+0x38>)
 800043a:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <MX_TIM4_Init+0x3c>)
 800043c:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 15999; // Для 1 кГц частоты
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_TIM4_Init+0x38>)
 8000440:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000444:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_TIM4_Init+0x38>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = led_periods[2]; // Начальная задержка 300 ms
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_TIM4_Init+0x40>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	4a06      	ldr	r2, [pc, #24]	; (800046c <MX_TIM4_Init+0x38>)
 8000452:	60d3      	str	r3, [r2, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_TIM4_Init+0x38>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <MX_TIM4_Init+0x38>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim4);
 8000460:	4802      	ldr	r0, [pc, #8]	; (800046c <MX_TIM4_Init+0x38>)
 8000462:	f000 fcef 	bl	8000e44 <HAL_TIM_Base_Init>
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200000c8 	.word	0x200000c8
 8000470:	40000800 	.word	0x40000800
 8000474:	20000000 	.word	0x20000000

08000478 <MX_TIM5_Init>:

static void MX_TIM5_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
    htim5.Instance = TIM5;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_TIM5_Init+0x38>)
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <MX_TIM5_Init+0x3c>)
 8000480:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = 15999; // Для 1 кГц частоты
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <MX_TIM5_Init+0x38>)
 8000484:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000488:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_TIM5_Init+0x38>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = led_periods[3]; // Начальная задержка 400 ms
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_TIM5_Init+0x40>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <MX_TIM5_Init+0x38>)
 8000496:	60d3      	str	r3, [r2, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <MX_TIM5_Init+0x38>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049e:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <MX_TIM5_Init+0x38>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim5);
 80004a4:	4802      	ldr	r0, [pc, #8]	; (80004b0 <MX_TIM5_Init+0x38>)
 80004a6:	f000 fccd 	bl	8000e44 <HAL_TIM_Base_Init>
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000110 	.word	0x20000110
 80004b4:	40000c00 	.word	0x40000c00
 80004b8:	20000000 	.word	0x20000000

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <HAL_MspInit+0x4c>)
 80004c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ca:	4a0f      	ldr	r2, [pc, #60]	; (8000508 <HAL_MspInit+0x4c>)
 80004cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d0:	6453      	str	r3, [r2, #68]	; 0x44
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <HAL_MspInit+0x4c>)
 80004d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_MspInit+0x4c>)
 80004e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <HAL_MspInit+0x4c>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	6413      	str	r3, [r2, #64]	; 0x40
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_MspInit+0x4c>)
 80004f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40023800 	.word	0x40023800

0800050c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800051c:	d116      	bne.n	800054c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	4b36      	ldr	r3, [pc, #216]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 8000524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000526:	4a35      	ldr	r2, [pc, #212]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6413      	str	r3, [r2, #64]	; 0x40
 800052e:	4b33      	ldr	r3, [pc, #204]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 8000530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	201c      	movs	r0, #28
 8000540:	f000 fa7b 	bl	8000a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000544:	201c      	movs	r0, #28
 8000546:	f000 fa94 	bl	8000a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800054a:	e052      	b.n	80005f2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a2b      	ldr	r2, [pc, #172]	; (8000600 <HAL_TIM_Base_MspInit+0xf4>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d116      	bne.n	8000584 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 800055c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055e:	4a27      	ldr	r2, [pc, #156]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	6413      	str	r3, [r2, #64]	; 0x40
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	201d      	movs	r0, #29
 8000578:	f000 fa5f 	bl	8000a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800057c:	201d      	movs	r0, #29
 800057e:	f000 fa78 	bl	8000a72 <HAL_NVIC_EnableIRQ>
}
 8000582:	e036      	b.n	80005f2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1e      	ldr	r2, [pc, #120]	; (8000604 <HAL_TIM_Base_MspInit+0xf8>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d116      	bne.n	80005bc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 8000594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000596:	4a19      	ldr	r2, [pc, #100]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6413      	str	r3, [r2, #64]	; 0x40
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	201e      	movs	r0, #30
 80005b0:	f000 fa43 	bl	8000a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005b4:	201e      	movs	r0, #30
 80005b6:	f000 fa5c 	bl	8000a72 <HAL_NVIC_EnableIRQ>
}
 80005ba:	e01a      	b.n	80005f2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a11      	ldr	r2, [pc, #68]	; (8000608 <HAL_TIM_Base_MspInit+0xfc>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d115      	bne.n	80005f2 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 80005d0:	f043 0308 	orr.w	r3, r3, #8
 80005d4:	6413      	str	r3, [r2, #64]	; 0x40
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_TIM_Base_MspInit+0xf0>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f003 0308 	and.w	r3, r3, #8
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	2032      	movs	r0, #50	; 0x32
 80005e8:	f000 fa27 	bl	8000a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80005ec:	2032      	movs	r0, #50	; 0x32
 80005ee:	f000 fa40 	bl	8000a72 <HAL_NVIC_EnableIRQ>
}
 80005f2:	bf00      	nop
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40000400 	.word	0x40000400
 8000604:	40000800 	.word	0x40000800
 8000608:	40000c00 	.word	0x40000c00

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <NMI_Handler+0x4>

08000612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <HardFault_Handler+0x4>

08000618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <MemManage_Handler+0x4>

0800061e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <BusFault_Handler+0x4>

08000624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <UsageFault_Handler+0x4>

0800062a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000658:	f000 f8d0 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <TIM2_IRQHandler+0x18>)
 8000666:	f000 fcdc 	bl	8001022 <HAL_TIM_IRQHandler>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); // Переключаем светодиод на PD12
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <TIM2_IRQHandler+0x1c>)
 8000670:	f000 fbce 	bl	8000e10 <HAL_GPIO_TogglePin>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000038 	.word	0x20000038
 800067c:	40020c00 	.word	0x40020c00

08000680 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim3);
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <TIM3_IRQHandler+0x18>)
 8000686:	f000 fccc 	bl	8001022 <HAL_TIM_IRQHandler>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); // Переключаем светодиод на PD13
 800068a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <TIM3_IRQHandler+0x1c>)
 8000690:	f000 fbbe 	bl	8000e10 <HAL_GPIO_TogglePin>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000080 	.word	0x20000080
 800069c:	40020c00 	.word	0x40020c00

080006a0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim4);
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <TIM4_IRQHandler+0x18>)
 80006a6:	f000 fcbc 	bl	8001022 <HAL_TIM_IRQHandler>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // Переключаем светодиод на PD14
 80006aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <TIM4_IRQHandler+0x1c>)
 80006b0:	f000 fbae 	bl	8000e10 <HAL_GPIO_TogglePin>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000c8 	.word	0x200000c8
 80006bc:	40020c00 	.word	0x40020c00

080006c0 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim5);
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <TIM5_IRQHandler+0x18>)
 80006c6:	f000 fcac 	bl	8001022 <HAL_TIM_IRQHandler>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); // Переключаем светодиод на PD15
 80006ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ce:	4803      	ldr	r0, [pc, #12]	; (80006dc <TIM5_IRQHandler+0x1c>)
 80006d0:	f000 fb9e 	bl	8000e10 <HAL_GPIO_TogglePin>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000110 	.word	0x20000110
 80006dc:	40020c00 	.word	0x40020c00

080006e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <SystemInit+0x20>)
 80006e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <SystemInit+0x20>)
 80006ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800073c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800070a:	490e      	ldr	r1, [pc, #56]	; (8000744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800070c:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000720:	4c0b      	ldr	r4, [pc, #44]	; (8000750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800072e:	f7ff ffd7 	bl	80006e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000732:	f000 fe65 	bl	8001400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000736:	f7ff fd47 	bl	80001c8 <main>
  bx  lr    
 800073a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800073c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000748:	08001468 	.word	0x08001468
  ldr r2, =_sbss
 800074c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000750:	20000160 	.word	0x20000160

08000754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC_IRQHandler>
	...

08000758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_Init+0x40>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <HAL_Init+0x40>)
 8000762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <HAL_Init+0x40>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <HAL_Init+0x40>)
 800076e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_Init+0x40>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_Init+0x40>)
 800077a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f94f 	bl	8000a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000786:	200f      	movs	r0, #15
 8000788:	f000 f808 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078c:	f7ff fe96 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023c00 	.word	0x40023c00

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x54>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_InitTick+0x58>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f967 	bl	8000a8e <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00e      	b.n	80007e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d80a      	bhi.n	80007e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f000 f92f 	bl	8000a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <HAL_InitTick+0x5c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e000      	b.n	80007e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000010 	.word	0x20000010
 80007f4:	20000018 	.word	0x20000018
 80007f8:	20000014 	.word	0x20000014

080007fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x20>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_IncTick+0x24>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_IncTick+0x24>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000018 	.word	0x20000018
 8000820:	2000015c 	.word	0x2000015c

08000824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return uwTick;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <HAL_GetTick+0x14>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	2000015c 	.word	0x2000015c

0800083c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000844:	f7ff ffee 	bl	8000824 <HAL_GetTick>
 8000848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000854:	d005      	beq.n	8000862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_Delay+0x44>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4413      	add	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000862:	bf00      	nop
 8000864:	f7ff ffde 	bl	8000824 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	429a      	cmp	r2, r3
 8000872:	d8f7      	bhi.n	8000864 <HAL_Delay+0x28>
  {
  }
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000018 	.word	0x20000018

08000884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	60d3      	str	r3, [r2, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <__NVIC_GetPriorityGrouping+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	f003 0307 	and.w	r3, r3, #7
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db0b      	blt.n	8000912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f003 021f 	and.w	r2, r3, #31
 8000900:	4907      	ldr	r1, [pc, #28]	; (8000920 <__NVIC_EnableIRQ+0x38>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	095b      	lsrs	r3, r3, #5
 8000908:	2001      	movs	r0, #1
 800090a:	fa00 f202 	lsl.w	r2, r0, r2
 800090e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000e100 	.word	0xe000e100

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f0:	d301      	bcc.n	80009f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00f      	b.n	8000a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <SysTick_Config+0x40>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fe:	210f      	movs	r1, #15
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f7ff ff8e 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <SysTick_Config+0x40>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SysTick_Config+0x40>)
 8000a10:	2207      	movs	r2, #7
 8000a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010

08000a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff29 	bl	8000884 <__NVIC_SetPriorityGrouping>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4c:	f7ff ff3e 	bl	80008cc <__NVIC_GetPriorityGrouping>
 8000a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	6978      	ldr	r0, [r7, #20]
 8000a58:	f7ff ff8e 	bl	8000978 <NVIC_EncodePriority>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff5d 	bl	8000924 <__NVIC_SetPriority>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff31 	bl	80008e8 <__NVIC_EnableIRQ>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ffa2 	bl	80009e0 <SysTick_Config>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	e16b      	b.n	8000d9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f040 815a 	bne.w	8000d96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d005      	beq.n	8000afa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d130      	bne.n	8000b5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b30:	2201      	movs	r2, #1
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	091b      	lsrs	r3, r3, #4
 8000b46:	f003 0201 	and.w	r2, r3, #1
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d017      	beq.n	8000b98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d123      	bne.n	8000bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	08da      	lsrs	r2, r3, #3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3208      	adds	r2, #8
 8000bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	220f      	movs	r2, #15
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	691a      	ldr	r2, [r3, #16]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	08da      	lsrs	r2, r3, #3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3208      	adds	r2, #8
 8000be6:	69b9      	ldr	r1, [r7, #24]
 8000be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0203 	and.w	r2, r3, #3
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 80b4 	beq.w	8000d96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b60      	ldr	r3, [pc, #384]	; (8000db4 <HAL_GPIO_Init+0x30c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a5f      	ldr	r2, [pc, #380]	; (8000db4 <HAL_GPIO_Init+0x30c>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b5d      	ldr	r3, [pc, #372]	; (8000db4 <HAL_GPIO_Init+0x30c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c4a:	4a5b      	ldr	r2, [pc, #364]	; (8000db8 <HAL_GPIO_Init+0x310>)
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3302      	adds	r3, #2
 8000c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	220f      	movs	r2, #15
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a52      	ldr	r2, [pc, #328]	; (8000dbc <HAL_GPIO_Init+0x314>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d02b      	beq.n	8000cce <HAL_GPIO_Init+0x226>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a51      	ldr	r2, [pc, #324]	; (8000dc0 <HAL_GPIO_Init+0x318>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d025      	beq.n	8000cca <HAL_GPIO_Init+0x222>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a50      	ldr	r2, [pc, #320]	; (8000dc4 <HAL_GPIO_Init+0x31c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d01f      	beq.n	8000cc6 <HAL_GPIO_Init+0x21e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4f      	ldr	r2, [pc, #316]	; (8000dc8 <HAL_GPIO_Init+0x320>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d019      	beq.n	8000cc2 <HAL_GPIO_Init+0x21a>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a4e      	ldr	r2, [pc, #312]	; (8000dcc <HAL_GPIO_Init+0x324>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d013      	beq.n	8000cbe <HAL_GPIO_Init+0x216>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a4d      	ldr	r2, [pc, #308]	; (8000dd0 <HAL_GPIO_Init+0x328>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d00d      	beq.n	8000cba <HAL_GPIO_Init+0x212>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a4c      	ldr	r2, [pc, #304]	; (8000dd4 <HAL_GPIO_Init+0x32c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d007      	beq.n	8000cb6 <HAL_GPIO_Init+0x20e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a4b      	ldr	r2, [pc, #300]	; (8000dd8 <HAL_GPIO_Init+0x330>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d101      	bne.n	8000cb2 <HAL_GPIO_Init+0x20a>
 8000cae:	2307      	movs	r3, #7
 8000cb0:	e00e      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	e00c      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	e00a      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cba:	2305      	movs	r3, #5
 8000cbc:	e008      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	e006      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e004      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	e002      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	69fa      	ldr	r2, [r7, #28]
 8000cd2:	f002 0203 	and.w	r2, r2, #3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4093      	lsls	r3, r2
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ce0:	4935      	ldr	r1, [pc, #212]	; (8000db8 <HAL_GPIO_Init+0x310>)
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cee:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d12:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d3c:	4a27      	ldr	r2, [pc, #156]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d66:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	f67f ae90 	bls.w	8000ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40013800 	.word	0x40013800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020c00 	.word	0x40020c00
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40021400 	.word	0x40021400
 8000dd4:	40021800 	.word	0x40021800
 8000dd8:	40021c00 	.word	0x40021c00
 8000ddc:	40013c00 	.word	0x40013c00

08000de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e001      	b.n	8000e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4013      	ands	r3, r2
 8000e28:	041a      	lsls	r2, r3, #16
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43d9      	mvns	r1, r3
 8000e2e:	887b      	ldrh	r3, [r7, #2]
 8000e30:	400b      	ands	r3, r1
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	619a      	str	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e041      	b.n	8000eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d106      	bne.n	8000e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fb4e 	bl	800050c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2202      	movs	r2, #2
 8000e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3304      	adds	r3, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4610      	mov	r0, r2
 8000e84:	f000 fa08 	bl	8001298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d001      	beq.n	8000efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e04e      	b.n	8000f9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2202      	movs	r2, #2
 8000f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <HAL_TIM_Base_Start_IT+0xc4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d022      	beq.n	8000f64 <HAL_TIM_Base_Start_IT+0x80>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f26:	d01d      	beq.n	8000f64 <HAL_TIM_Base_Start_IT+0x80>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a1f      	ldr	r2, [pc, #124]	; (8000fac <HAL_TIM_Base_Start_IT+0xc8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d018      	beq.n	8000f64 <HAL_TIM_Base_Start_IT+0x80>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d013      	beq.n	8000f64 <HAL_TIM_Base_Start_IT+0x80>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00e      	beq.n	8000f64 <HAL_TIM_Base_Start_IT+0x80>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d009      	beq.n	8000f64 <HAL_TIM_Base_Start_IT+0x80>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <HAL_TIM_Base_Start_IT+0xd8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d004      	beq.n	8000f64 <HAL_TIM_Base_Start_IT+0x80>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a18      	ldr	r2, [pc, #96]	; (8000fc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d111      	bne.n	8000f88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d010      	beq.n	8000f98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f042 0201 	orr.w	r2, r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f86:	e007      	b.n	8000f98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 0201 	orr.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	40000400 	.word	0x40000400
 8000fb0:	40000800 	.word	0x40000800
 8000fb4:	40000c00 	.word	0x40000c00
 8000fb8:	40010400 	.word	0x40010400
 8000fbc:	40014000 	.word	0x40014000
 8000fc0:	40001800 	.word	0x40001800

08000fc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6a1a      	ldr	r2, [r3, #32]
 8000fe2:	f241 1311 	movw	r3, #4369	; 0x1111
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10f      	bne.n	800100c <HAL_TIM_Base_Stop_IT+0x48>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6a1a      	ldr	r2, [r3, #32]
 8000ff2:	f240 4344 	movw	r3, #1092	; 0x444
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d107      	bne.n	800100c <HAL_TIM_Base_Stop_IT+0x48>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0201 	bic.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b02      	cmp	r3, #2
 8001036:	d122      	bne.n	800107e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b02      	cmp	r3, #2
 8001044:	d11b      	bne.n	800107e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f06f 0202 	mvn.w	r2, #2
 800104e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f8f8 	bl	800125a <HAL_TIM_IC_CaptureCallback>
 800106a:	e005      	b.n	8001078 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f8ea 	bl	8001246 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f8fb 	bl	800126e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	2b04      	cmp	r3, #4
 800108a:	d122      	bne.n	80010d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	2b04      	cmp	r3, #4
 8001098:	d11b      	bne.n	80010d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f06f 0204 	mvn.w	r2, #4
 80010a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2202      	movs	r2, #2
 80010a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f8ce 	bl	800125a <HAL_TIM_IC_CaptureCallback>
 80010be:	e005      	b.n	80010cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f8c0 	bl	8001246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f8d1 	bl	800126e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d122      	bne.n	8001126 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d11b      	bne.n	8001126 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f06f 0208 	mvn.w	r2, #8
 80010f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2204      	movs	r2, #4
 80010fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 f8a4 	bl	800125a <HAL_TIM_IC_CaptureCallback>
 8001112:	e005      	b.n	8001120 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f896 	bl	8001246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f8a7 	bl	800126e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	f003 0310 	and.w	r3, r3, #16
 8001130:	2b10      	cmp	r3, #16
 8001132:	d122      	bne.n	800117a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	2b10      	cmp	r3, #16
 8001140:	d11b      	bne.n	800117a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f06f 0210 	mvn.w	r2, #16
 800114a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2208      	movs	r2, #8
 8001150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f87a 	bl	800125a <HAL_TIM_IC_CaptureCallback>
 8001166:	e005      	b.n	8001174 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f86c 	bl	8001246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f87d 	bl	800126e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10e      	bne.n	80011a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b01      	cmp	r3, #1
 8001194:	d107      	bne.n	80011a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f06f 0201 	mvn.w	r2, #1
 800119e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f846 	bl	8001232 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b0:	2b80      	cmp	r3, #128	; 0x80
 80011b2:	d10e      	bne.n	80011d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	2b80      	cmp	r3, #128	; 0x80
 80011c0:	d107      	bne.n	80011d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f90d 	bl	80013ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011dc:	2b40      	cmp	r3, #64	; 0x40
 80011de:	d10e      	bne.n	80011fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ea:	2b40      	cmp	r3, #64	; 0x40
 80011ec:	d107      	bne.n	80011fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80011f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f842 	bl	8001282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	f003 0320 	and.w	r3, r3, #32
 8001208:	2b20      	cmp	r3, #32
 800120a:	d10e      	bne.n	800122a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f003 0320 	and.w	r3, r3, #32
 8001216:	2b20      	cmp	r3, #32
 8001218:	d107      	bne.n	800122a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f06f 0220 	mvn.w	r2, #32
 8001222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f8d7 	bl	80013d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a40      	ldr	r2, [pc, #256]	; (80013ac <TIM_Base_SetConfig+0x114>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d013      	beq.n	80012d8 <TIM_Base_SetConfig+0x40>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b6:	d00f      	beq.n	80012d8 <TIM_Base_SetConfig+0x40>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3d      	ldr	r2, [pc, #244]	; (80013b0 <TIM_Base_SetConfig+0x118>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00b      	beq.n	80012d8 <TIM_Base_SetConfig+0x40>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a3c      	ldr	r2, [pc, #240]	; (80013b4 <TIM_Base_SetConfig+0x11c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d007      	beq.n	80012d8 <TIM_Base_SetConfig+0x40>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3b      	ldr	r2, [pc, #236]	; (80013b8 <TIM_Base_SetConfig+0x120>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d003      	beq.n	80012d8 <TIM_Base_SetConfig+0x40>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a3a      	ldr	r2, [pc, #232]	; (80013bc <TIM_Base_SetConfig+0x124>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d108      	bne.n	80012ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a2f      	ldr	r2, [pc, #188]	; (80013ac <TIM_Base_SetConfig+0x114>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02b      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f8:	d027      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a2c      	ldr	r2, [pc, #176]	; (80013b0 <TIM_Base_SetConfig+0x118>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d023      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a2b      	ldr	r2, [pc, #172]	; (80013b4 <TIM_Base_SetConfig+0x11c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01f      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <TIM_Base_SetConfig+0x120>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d01b      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a29      	ldr	r2, [pc, #164]	; (80013bc <TIM_Base_SetConfig+0x124>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d017      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a28      	ldr	r2, [pc, #160]	; (80013c0 <TIM_Base_SetConfig+0x128>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <TIM_Base_SetConfig+0x12c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00f      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a26      	ldr	r2, [pc, #152]	; (80013c8 <TIM_Base_SetConfig+0x130>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00b      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a25      	ldr	r2, [pc, #148]	; (80013cc <TIM_Base_SetConfig+0x134>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a24      	ldr	r2, [pc, #144]	; (80013d0 <TIM_Base_SetConfig+0x138>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d003      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <TIM_Base_SetConfig+0x13c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d108      	bne.n	800135c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4313      	orrs	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <TIM_Base_SetConfig+0x114>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d003      	beq.n	8001390 <TIM_Base_SetConfig+0xf8>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <TIM_Base_SetConfig+0x124>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d103      	bne.n	8001398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	615a      	str	r2, [r3, #20]
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40010000 	.word	0x40010000
 80013b0:	40000400 	.word	0x40000400
 80013b4:	40000800 	.word	0x40000800
 80013b8:	40000c00 	.word	0x40000c00
 80013bc:	40010400 	.word	0x40010400
 80013c0:	40014000 	.word	0x40014000
 80013c4:	40014400 	.word	0x40014400
 80013c8:	40014800 	.word	0x40014800
 80013cc:	40001800 	.word	0x40001800
 80013d0:	40001c00 	.word	0x40001c00
 80013d4:	40002000 	.word	0x40002000

080013d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <__libc_init_array>:
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	4d0d      	ldr	r5, [pc, #52]	; (8001438 <__libc_init_array+0x38>)
 8001404:	4c0d      	ldr	r4, [pc, #52]	; (800143c <__libc_init_array+0x3c>)
 8001406:	1b64      	subs	r4, r4, r5
 8001408:	10a4      	asrs	r4, r4, #2
 800140a:	2600      	movs	r6, #0
 800140c:	42a6      	cmp	r6, r4
 800140e:	d109      	bne.n	8001424 <__libc_init_array+0x24>
 8001410:	4d0b      	ldr	r5, [pc, #44]	; (8001440 <__libc_init_array+0x40>)
 8001412:	4c0c      	ldr	r4, [pc, #48]	; (8001444 <__libc_init_array+0x44>)
 8001414:	f000 f818 	bl	8001448 <_init>
 8001418:	1b64      	subs	r4, r4, r5
 800141a:	10a4      	asrs	r4, r4, #2
 800141c:	2600      	movs	r6, #0
 800141e:	42a6      	cmp	r6, r4
 8001420:	d105      	bne.n	800142e <__libc_init_array+0x2e>
 8001422:	bd70      	pop	{r4, r5, r6, pc}
 8001424:	f855 3b04 	ldr.w	r3, [r5], #4
 8001428:	4798      	blx	r3
 800142a:	3601      	adds	r6, #1
 800142c:	e7ee      	b.n	800140c <__libc_init_array+0xc>
 800142e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001432:	4798      	blx	r3
 8001434:	3601      	adds	r6, #1
 8001436:	e7f2      	b.n	800141e <__libc_init_array+0x1e>
 8001438:	08001460 	.word	0x08001460
 800143c:	08001460 	.word	0x08001460
 8001440:	08001460 	.word	0x08001460
 8001444:	08001464 	.word	0x08001464

08001448 <_init>:
 8001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144a:	bf00      	nop
 800144c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800144e:	bc08      	pop	{r3}
 8001450:	469e      	mov	lr, r3
 8001452:	4770      	bx	lr

08001454 <_fini>:
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001456:	bf00      	nop
 8001458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800145a:	bc08      	pop	{r3}
 800145c:	469e      	mov	lr, r3
 800145e:	4770      	bx	lr
